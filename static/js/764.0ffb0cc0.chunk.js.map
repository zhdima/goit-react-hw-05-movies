{"version":3,"file":"static/js/764.0ffb0cc0.chunk.js","mappings":"0MAEaA,E,QAAYC,GAAAA,GAAH,6C,SCETC,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,UACGG,EAAOG,KAAI,SAACC,GAAD,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SACGG,EAAMK,SAFFL,EAAME,GADL,KASjB,C,2HCVKI,EACE,OADFA,EAEK,UAFLA,EAGK,UAHLA,EAIG,QA8CT,UA3Ce,WAAO,IAAD,EAEnB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BJ,EAAAA,EAAAA,UAASD,GAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAK,UAAGN,EAAaO,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACNL,EAAUP,IACVa,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJb,EAAUa,EAAKC,SACfT,EAAUP,EACX,IACAiB,OAAM,SAAAC,GACLhB,EAAU,IACVO,EAASU,OAAOD,IAChBX,EAAUP,EACX,GACN,GAAE,CAACU,IAQJ,OACE,6BACE,eAAIU,UAAU,kBAAd,qBACA,kBAAMC,aAAa,MAAMC,SATR,SAACC,GACpBA,EAAIC,iBACJ,IAAMd,EAAQa,EAAIE,cAAcC,SAASC,OAAOC,MAAMC,OACtDxB,EAAgBK,EAAQ,CAAEA,MAAAA,GAAU,CAAC,EACtC,EAKG,WACE,kBAAOoB,KAAK,SAASC,KAAK,YAC1B,mBAAQD,KAAK,SAAb,UAAsB,SAAC,MAAD,CAAUE,KAAK,aAEvC,SAAC,IAAD,CAAY1C,OAAQA,IACnBgB,IAAWN,IAAkB,SAAC,IAAD,IAC7BM,IAAWN,IAAgB,SAAC,KAAD,UAAYQ,MAG7C,C,mMCtDKyB,EAAW,gCACXC,EAAW,mCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFtC,cACCG,EADD,yBAIEA,EAAStB,MAJX,kEAOA,SAAeF,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,uFACkB0B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BxB,IAFjD,cACC2B,EADD,yBAIEA,EAAStB,MAJX,kEAOA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDM,EADC,oBACkBL,IAFpC,cACCG,EADD,yBAIEA,EAAStB,MAJX,kEAOA,SAAeyB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,uFACkBH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDM,EADC,4BAC0BL,IAF5C,cACCG,EADD,yBAIEA,EAAStB,MAJX,kEAOA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,uFACkBH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDM,EADC,4BAC0BL,IAF5C,cACCG,EADD,yBAIEA,EAAStB,MAJX,kE","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Movies.js","services/movies-api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.ul`\n  margin-top: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Container } from \"./MoviesList.styled\";\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map((movie) => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};","import { useState, useEffect } from 'react';\nimport { getSearchMovies } from '../services/movies-api'\nimport { Loader } from '../components/Loader/Loader';\nimport { ErrorInfo } from '../components/SharedLayout/SharedLayout.styled';\nimport { MoviesList } from '../components/MoviesList/MoviesList'\nimport { useSearchParams } from 'react-router-dom';\nimport { HiSearch } from \"react-icons/hi\";\n\nconst Status = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  RESOLVE: 'resolve',\n  ERROR: 'error'\n}\n\nconst Movies = () => {\n\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState('');\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n      setStatus(Status.LOADING);\n      getSearchMovies(query)\n        .then(data => {\n          setMovies(data.results);\n          setStatus(Status.RESOLVE);\n        })\n        .catch(err => {\n          setMovies([]);\n          setError(String(err));\n          setStatus(Status.ERROR);\n        });\n  }, [query]);\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    const query = evt.currentTarget.elements.search.value.trim();\n    setSearchParams(query ? { query } : {});\n  };\n\n  return (\n    <main>\n      <h1 className=\"visually-hidden\">Movies</h1>\n      <form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input type=\"search\" name=\"search\" />\n        <button type=\"submit\"><HiSearch size=\"16\" /></button>\n      </form>\n      <MoviesList movies={movies} />\n      {status === Status.LOADING && <Loader />}\n      {status === Status.ERROR && <ErrorInfo>{error}</ErrorInfo>}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY_API  = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nexport async function getTrendingMovies() {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY_API}`\n  );\n  return response.data;\n}\n\nexport async function getSearchMovies(query) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY_API}&query=${query}`   \n  );\n  return response.data;\n}\n\nexport async function getMovieDetails(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY_API}`\n  );\n  return response.data;\n}\n\nexport async function getMovieCast(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY_API}`\n  );\n  return response.data;\n}\n\nexport async function getMovieReviews(movieId) {     \n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY_API}`\n  );\n  return response.data;\n}\n"],"names":["Container","styled","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","title","Status","useState","setMovies","useSearchParams","searchParams","setSearchParams","status","setStatus","error","setError","query","get","useEffect","getSearchMovies","then","data","results","catch","err","String","className","autoComplete","onSubmit","evt","preventDefault","currentTarget","elements","search","value","trim","type","name","size","BASE_URL","KEY_API","getTrendingMovies","axios","response","getMovieDetails","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}